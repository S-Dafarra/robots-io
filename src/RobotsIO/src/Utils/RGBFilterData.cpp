/*
 * Copyright (C) 2020 Istituto Italiano di Tecnologia (IIT)
 *
 * This software may be modified and distributed under the terms of the
 * GPL-2+ license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <RobotsIO/Utils/RGBFilterData.h>

using namespace RobotsIO::Utils;

// Default constructor
RGBFilterData::RGBFilterData() :
        WirePortable(),
        measured_image(),
        predicted_pose()
{
}

// Constructor with field values
RGBFilterData::RGBFilterData(const yarp::sig::ImageOf<yarp::sig::PixelRgb>& measured_image,
                             const yarp::sig::Matrix& predicted_pose) :
        WirePortable(),
        measured_image(measured_image),
        predicted_pose(predicted_pose)
{
}

// Read structure on a Wire
bool RGBFilterData::read(yarp::os::idl::WireReader& reader)
{
    if (!read_measured_image(reader)) {
        return false;
    }
    if (!read_predicted_pose(reader)) {
        return false;
    }
    return !reader.isError();
}

// Read structure on a Connection
bool RGBFilterData::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(2)) {
        return false;
    }
    return read(reader);
}

// Write structure on a Wire
bool RGBFilterData::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_measured_image(writer)) {
        return false;
    }
    if (!write_predicted_pose(writer)) {
        return false;
    }
    return !writer.isError();
}

// Write structure on a Connection
bool RGBFilterData::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    return write(writer);
}

// Convert to a printable string
std::string RGBFilterData::toString() const
{
    yarp::os::Bottle b;
    b.read(*this);
    return b.toString();
}

// Editor: default constructor
RGBFilterData::Editor::Editor()
{
    group = 0;
    obj_owned = true;
    obj = new RGBFilterData;
    dirty_flags(false);
    yarp().setOwner(*this);
}

// Editor: constructor with base class
RGBFilterData::Editor::Editor(RGBFilterData& obj)
{
    group = 0;
    obj_owned = false;
    edit(obj, false);
    yarp().setOwner(*this);
}

// Editor: destructor
RGBFilterData::Editor::~Editor()
{
    if (obj_owned) {
        delete obj;
    }
}

// Editor: edit
bool RGBFilterData::Editor::edit(RGBFilterData& obj, bool dirty)
{
    if (obj_owned) {
        delete this->obj;
    }
    this->obj = &obj;
    obj_owned = false;
    dirty_flags(dirty);
    return true;
}

// Editor: validity check
bool RGBFilterData::Editor::isValid() const
{
    return obj != nullptr;
}

// Editor: state
RGBFilterData& RGBFilterData::Editor::state()
{
    return *obj;
}

// Editor: grouping begin
void RGBFilterData::Editor::start_editing()
{
    group++;
}

// Editor: grouping end
void RGBFilterData::Editor::stop_editing()
{
    group--;
    if (group == 0 && is_dirty) {
        communicate();
    }
}
// Editor: measured_image setter
void RGBFilterData::Editor::set_measured_image(const yarp::sig::ImageOf<yarp::sig::PixelRgb>& measured_image)
{
    will_set_measured_image();
    obj->measured_image = measured_image;
    mark_dirty_measured_image();
    communicate();
    did_set_measured_image();
}

// Editor: measured_image getter
const yarp::sig::ImageOf<yarp::sig::PixelRgb>& RGBFilterData::Editor::get_measured_image() const
{
    return obj->measured_image;
}

// Editor: measured_image will_set
bool RGBFilterData::Editor::will_set_measured_image()
{
    return true;
}

// Editor: measured_image did_set
bool RGBFilterData::Editor::did_set_measured_image()
{
    return true;
}

// Editor: predicted_pose setter
void RGBFilterData::Editor::set_predicted_pose(const yarp::sig::Matrix& predicted_pose)
{
    will_set_predicted_pose();
    obj->predicted_pose = predicted_pose;
    mark_dirty_predicted_pose();
    communicate();
    did_set_predicted_pose();
}

// Editor: predicted_pose getter
const yarp::sig::Matrix& RGBFilterData::Editor::get_predicted_pose() const
{
    return obj->predicted_pose;
}

// Editor: predicted_pose will_set
bool RGBFilterData::Editor::will_set_predicted_pose()
{
    return true;
}

// Editor: predicted_pose did_set
bool RGBFilterData::Editor::did_set_predicted_pose()
{
    return true;
}

// Editor: clean
void RGBFilterData::Editor::clean()
{
    dirty_flags(false);
}

// Editor: read
bool RGBFilterData::Editor::read(yarp::os::ConnectionReader& connection)
{
    if (!isValid()) {
        return false;
    }
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        return false;
    }
    int len = reader.getLength();
    if (len == 0) {
        yarp::os::idl::WireWriter writer(reader);
        if (writer.isNull()) {
            return true;
        }
        if (!writer.writeListHeader(1)) {
            return false;
        }
        writer.writeString("send: 'help' or 'patch (param1 val1) (param2 val2)'");
        return true;
    }
    std::string tag;
    if (!reader.readString(tag)) {
        return false;
    }
    if (tag == "help") {
        yarp::os::idl::WireWriter writer(reader);
        if (writer.isNull()) {
            return true;
        }
        if (!writer.writeListHeader(2)) {
            return false;
        }
        if (!writer.writeTag("many", 1, 0)) {
            return false;
        }
        if (reader.getLength() > 0) {
            std::string field;
            if (!reader.readString(field)) {
                return false;
            }
            if (field == "measured_image") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("yarp::sig::ImageOf<yarp::sig::PixelRgb> measured_image")) {
                    return false;
                }
            }
            if (field == "predicted_pose") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("yarp::sig::Matrix predicted_pose")) {
                    return false;
                }
            }
        }
        if (!writer.writeListHeader(3)) {
            return false;
        }
        writer.writeString("*** Available fields:");
        writer.writeString("measured_image");
        writer.writeString("predicted_pose");
        return true;
    }
    bool nested = true;
    bool have_act = false;
    if (tag != "patch") {
        if (((len - 1) % 2) != 0) {
            return false;
        }
        len = 1 + ((len - 1) / 2);
        nested = false;
        have_act = true;
    }
    for (int i = 1; i < len; ++i) {
        if (nested && !reader.readListHeader(3)) {
            return false;
        }
        std::string act;
        std::string key;
        if (have_act) {
            act = tag;
        } else if (!reader.readString(act)) {
            return false;
        }
        if (!reader.readString(key)) {
            return false;
        }
        if (key == "measured_image") {
            will_set_measured_image();
            if (!obj->nested_read_measured_image(reader)) {
                return false;
            }
            did_set_measured_image();
        } else if (key == "predicted_pose") {
            will_set_predicted_pose();
            if (!obj->nested_read_predicted_pose(reader)) {
                return false;
            }
            did_set_predicted_pose();
        } else {
            // would be useful to have a fallback here
        }
    }
    reader.accept();
    yarp::os::idl::WireWriter writer(reader);
    if (writer.isNull()) {
        return true;
    }
    writer.writeListHeader(1);
    writer.writeVocab32(yarp::os::createVocab32('o', 'k'));
    return true;
}

// Editor: write
bool RGBFilterData::Editor::write(yarp::os::ConnectionWriter& connection) const
{
    if (!isValid()) {
        return false;
    }
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(dirty_count + 1)) {
        return false;
    }
    if (!writer.writeString("patch")) {
        return false;
    }
    if (is_dirty_measured_image) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("measured_image")) {
            return false;
        }
        if (!obj->nested_write_measured_image(writer)) {
            return false;
        }
    }
    if (is_dirty_predicted_pose) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("predicted_pose")) {
            return false;
        }
        if (!obj->nested_write_predicted_pose(writer)) {
            return false;
        }
    }
    return !writer.isError();
}

// Editor: send if possible
void RGBFilterData::Editor::communicate()
{
    if (group != 0) {
        return;
    }
    if (yarp().canWrite()) {
        yarp().write(*this);
        clean();
    }
}

// Editor: mark dirty overall
void RGBFilterData::Editor::mark_dirty()
{
    is_dirty = true;
}

// Editor: measured_image mark_dirty
void RGBFilterData::Editor::mark_dirty_measured_image()
{
    if (is_dirty_measured_image) {
        return;
    }
    dirty_count++;
    is_dirty_measured_image = true;
    mark_dirty();
}

// Editor: predicted_pose mark_dirty
void RGBFilterData::Editor::mark_dirty_predicted_pose()
{
    if (is_dirty_predicted_pose) {
        return;
    }
    dirty_count++;
    is_dirty_predicted_pose = true;
    mark_dirty();
}

// Editor: dirty_flags
void RGBFilterData::Editor::dirty_flags(bool flag)
{
    is_dirty = flag;
    is_dirty_measured_image = flag;
    is_dirty_predicted_pose = flag;
    dirty_count = flag ? 2 : 0;
}

// read measured_image field
bool RGBFilterData::read_measured_image(yarp::os::idl::WireReader& reader)
{
    if (!reader.read(measured_image)) {
        reader.fail();
        return false;
    }
    return true;
}

// write measured_image field
bool RGBFilterData::write_measured_image(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(measured_image)) {
        return false;
    }
    return true;
}

// read (nested) measured_image field
bool RGBFilterData::nested_read_measured_image(yarp::os::idl::WireReader& reader)
{
    if (!reader.readNested(measured_image)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) measured_image field
bool RGBFilterData::nested_write_measured_image(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(measured_image)) {
        return false;
    }
    return true;
}

// read predicted_pose field
bool RGBFilterData::read_predicted_pose(yarp::os::idl::WireReader& reader)
{
    if (!reader.read(predicted_pose)) {
        reader.fail();
        return false;
    }
    return true;
}

// write predicted_pose field
bool RGBFilterData::write_predicted_pose(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(predicted_pose)) {
        return false;
    }
    return true;
}

// read (nested) predicted_pose field
bool RGBFilterData::nested_read_predicted_pose(yarp::os::idl::WireReader& reader)
{
    if (!reader.readNested(predicted_pose)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) predicted_pose field
bool RGBFilterData::nested_write_predicted_pose(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(predicted_pose)) {
        return false;
    }
    return true;
}
