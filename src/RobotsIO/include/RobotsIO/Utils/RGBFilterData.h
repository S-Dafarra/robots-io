/*
 * Copyright (C) 2020 Istituto Italiano di Tecnologia (IIT)
 *
 * This software may be modified and distributed under the terms of the
 * GPL-2+ license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef ROBOTSIO_YARP_THRIFT_GENERATOR_STRUCT_RGBFILTERDATA_H
#define ROBOTSIO_YARP_THRIFT_GENERATOR_STRUCT_RGBFILTERDATA_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <yarp/sig/Image.h>
#include <yarp/sig/Matrix.h>

namespace RobotsIO {
    namespace Utils {
        class RGBFilterData;
    }
}

using RobotsIOUtilsRGBFilterData = RobotsIO::Utils::RGBFilterData;


class RobotsIO::Utils::RGBFilterData : public yarp::os::idl::WirePortable
{
public:
    // Fields
    yarp::sig::ImageOf<yarp::sig::PixelRgb> measured_image;
    yarp::sig::Matrix predicted_pose;

    // Default constructor
    RGBFilterData();

    // Constructor with field values
    RGBFilterData(const yarp::sig::ImageOf<yarp::sig::PixelRgb>& measured_image,
                  const yarp::sig::Matrix& predicted_pose);

    // Read structure on a Wire
    bool read(yarp::os::idl::WireReader& reader) override;

    // Read structure on a Connection
    bool read(yarp::os::ConnectionReader& connection) override;

    // Write structure on a Wire
    bool write(const yarp::os::idl::WireWriter& writer) const override;

    // Write structure on a Connection
    bool write(yarp::os::ConnectionWriter& connection) const override;

    // Convert to a printable string
    std::string toString() const;

    // If you want to serialize this class without nesting, use this helper
    typedef yarp::os::idl::Unwrapped<RGBFilterData> unwrapped;

    class Editor :
            public yarp::os::Wire,
            public yarp::os::PortWriter
    {
    public:
        // Editor: default constructor
        Editor();

        // Editor: constructor with base class
        Editor(RGBFilterData& obj);

        // Editor: destructor
        ~Editor() override;

        // Editor: Deleted constructors and operator=
        Editor(const Editor& rhs) = delete;
        Editor(Editor&& rhs) = delete;
        Editor& operator=(const Editor& rhs) = delete;
        Editor& operator=(Editor&& rhs) = delete;

        // Editor: edit
        bool edit(RGBFilterData& obj, bool dirty = true);

        // Editor: validity check
        bool isValid() const;

        // Editor: state
        RGBFilterData& state();

        // Editor: start editing
        void start_editing();

#ifndef YARP_NO_DEPRECATED // Since YARP 3.2
        YARP_DEPRECATED_MSG("Use start_editing() instead")
        void begin()
        {
            start_editing();
        }
#endif // YARP_NO_DEPRECATED

        // Editor: stop editing
        void stop_editing();

#ifndef YARP_NO_DEPRECATED // Since YARP 3.2
        YARP_DEPRECATED_MSG("Use stop_editing() instead")
        void end()
        {
            stop_editing();
        }
#endif // YARP_NO_DEPRECATED

        // Editor: measured_image field
        void set_measured_image(const yarp::sig::ImageOf<yarp::sig::PixelRgb>& measured_image);
        const yarp::sig::ImageOf<yarp::sig::PixelRgb>& get_measured_image() const;
        virtual bool will_set_measured_image();
        virtual bool did_set_measured_image();

        // Editor: predicted_pose field
        void set_predicted_pose(const yarp::sig::Matrix& predicted_pose);
        const yarp::sig::Matrix& get_predicted_pose() const;
        virtual bool will_set_predicted_pose();
        virtual bool did_set_predicted_pose();

        // Editor: clean
        void clean();

        // Editor: read
        bool read(yarp::os::ConnectionReader& connection) override;

        // Editor: write
        bool write(yarp::os::ConnectionWriter& connection) const override;

    private:
        // Editor: state
        RGBFilterData* obj;
        bool obj_owned;
        int group;

        // Editor: dirty variables
        bool is_dirty;
        bool is_dirty_measured_image;
        bool is_dirty_predicted_pose;
        int dirty_count;

        // Editor: send if possible
        void communicate();

        // Editor: mark dirty overall
        void mark_dirty();

        // Editor: mark dirty single fields
        void mark_dirty_measured_image();
        void mark_dirty_predicted_pose();

        // Editor: dirty_flags
        void dirty_flags(bool flag);
    };

private:
    // read/write measured_image field
    bool read_measured_image(yarp::os::idl::WireReader& reader);
    bool write_measured_image(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_measured_image(yarp::os::idl::WireReader& reader);
    bool nested_write_measured_image(const yarp::os::idl::WireWriter& writer) const;

    // read/write predicted_pose field
    bool read_predicted_pose(yarp::os::idl::WireReader& reader);
    bool write_predicted_pose(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_predicted_pose(yarp::os::idl::WireReader& reader);
    bool nested_write_predicted_pose(const yarp::os::idl::WireWriter& writer) const;
};

#endif /* ROBOTSIO_YARP_THRIFT_GENERATOR_STRUCT_RGBFILTERDATA_H */
